name: Main Branch CI

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

on:
  push:
    branches:
      - 'main'

# Needed for nx-set-shas within nx-cloud-main.yml,
# when run on the main branch,
# and to publish to GitHub Packages
permissions:
  actions: read
  contents: write
  packages: write

jobs:
  main:
    name: Nx Cloud - Main Job
    if: contains(github.event.head_commit.message, 'chore(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.13.1
    with:
      main-branch-name: main
      number-of-agents: 3
      init-commands: |
        npx nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      parallel-commands: |
        npx nx-cloud record -- npx nx format:check
        npx nx-cloud record -- npx commitlint --from ${{ github.sha }} --to ${{ github.sha }} --verbose
      parallel-commands-on-agents: |
        npx nx run-many --target=lint --all --parallel=3
        npx nx run-many --target=test --all --parallel=3 --ci --coverage
        npx nx run-many --target=build --all --parallel=3
        npx nx run-many --target=e2e --all --parallel=1 --ci
      artifacts-path: |
        dist/
        coverage/
      artifacts-name: dist-and-coverage-artifacts

  agents:
    name: Nx Cloud - Agents
    if: contains(github.event.head_commit.message, 'chore(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.13.1
    with:
      number-of-agents: 3

  check:
    name: Check Artifacts
    runs-on: ubuntu-latest
    needs: ['main']
    outputs:
      exists: ${{ steps.check-artifact-exists.outputs.exists }}
    steps:
      - uses: xSAVIKx/artifact-exists-action@v0
        id: check-artifact-exists
        with:
          name: dist-and-coverage-artifacts

  codecoverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: ['check']
    if: needs.check.outputs.exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-and-coverage-artifacts
          path: coverage/
      - name: Code Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: false # optional (default = false)
          verbose: false # optional (default = false)

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ['check', 'codecoverage']
    if: needs.check.outputs.exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: 'lts/*'
      - name: Download artififacts
        uses: actions/download-artifact@v3
        with:
          name: dist-and-coverage-artifacts
          path: dist/
      - name: Install dependencies
        run: npm ci
      - name: Release
        run: HUSKY=0 npx nx run-many --target=semantic-release --all --parallel=1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          NPM_TOKEN: ${{ secrets.PAT }}
